/*Задача №5. «Капризуля» Не используя context и буферизованные
каналы необходимо написать программу, которая будет запускать 10
рабочих горутин и одну капризную управляющую горутину. Каждая
рабочая горутина с задержкой в 1 секунду должна выводить в stdout
сообщение «сложные вычисления горутины: 1», где 1 - порядковый
номер горутины. Управляющая горутина через 3 секунды после своего
запуска должна в stdout вывести «ой, всё!», после чего рабочие
горутины должны в stdout вывести «stop горутина: 1», где 1 -
порядковый номер горутины, и завершить своё выполнение. В консоли
должны увидеть что-то подобное:
сложные вычисления горутины: 3
сложные вычисления горутины: 8
сложные вычисления горутины: 4
сложные вычисления горутины: 9
сложные вычисления горутины: 7
сложные вычисления горутины: 2
сложные вычисления горутины: 0
сложные вычисления горутины: 1
сложные вычисления горутины: 5
сложные вычисления горутины: 6
ой, всё!
сложные вычисления горутины: 3
24
stop горутина: 3
сложные вычисления горутины: 9
stop горутина: 9
сложные вычисления горутины: 7
stop горутина: 7
сложные вычисления горутины: 4
stop горутина: 4
сложные вычисления горутины: 8
stop горутина: 8
сложные вычисления горутины: 6
stop горутина: 6
сложные вычисления горутины: 2
stop горутина: 2
сложные вычисления горутины: 0
stop горутина: 0
сложные вычисления горутины: 1
stop горутина: 1
сложные вычисления горутины: 5
stop горутина: 5
25*/

package main

import (
	"fmt"
	"sync"
	"sync/atomic"
	"time"
)

func main() {

	// не разрешают контекст - а мы свой сделаем :)
	var contextCancelled int32 = 0
	wg := sync.WaitGroup{}

	wg.Add(1)
	go func(context *int32) {
		defer wg.Done()
		time.Sleep(3 * time.Second)
		fmt.Println("ой, все!")
		atomic.StoreInt32(context, 1)
	}(&contextCancelled)

	for i := 1; i <= 10; i++ {
		i := i

		wg.Add(1)
		go func(context *int32) {
			defer wg.Done()
			for {
				fmt.Println("сложные вычисления горутины: ", i)
				if atomic.LoadInt32(context) == 1 {
					fmt.Println("stop горутина: ", i)
					return
				}
				time.Sleep(time.Second)
			}
		}(&contextCancelled)
	}
	wg.Wait()
}
